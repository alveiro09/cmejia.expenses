<?xml version="1.0"?>
<doc>
    <assembly>
        <name>User.API</name>
    </assembly>
    <members>
        <member name="T:User.API.Application.Contracts.IUserService">
            <summary>
            Service to manager users
            </summary>
        </member>
        <member name="M:User.API.Application.Contracts.IUserService.AddUser(User.API.Application.Model.Request.AddUserRequest)">
            <summary>
            Register a new user
            </summary>
            <param name="addUserRequest"></param>
        </member>
        <member name="M:User.API.Application.Contracts.IUserService.GetUser(System.String)">
            <summary>
            Get user
            </summary>
            <returns></returns>
        </member>
        <member name="M:User.API.Application.Contracts.IUserService.GetUsers">
            <summary>
            Get users
            </summary>
            <returns></returns>
        </member>
        <member name="M:User.API.Application.Contracts.IUserService.Authenticate(User.API.Application.Model.Request.UserInfoRequest)">
            <summary>
            Authenticate
            </summary>
            <returns></returns>
        </member>
        <member name="T:User.API.Application.Model.UserSettings">
            <summary>
            Settings for the seed of orders
            </summary>
        </member>
        <member name="P:User.API.Application.Model.UserSettings.UseSampleData">
            <summary>
            Sets if the database is going to be fill with sample data
            </summary>
        </member>
        <member name="M:User.API.Application.Services.UserService.#ctor(Domain.Core.Contracts.IUnitOfWork,UserManagement.Domain.Repositories.IUserRepository,User.API.Application.Contracts.ITokenAuthentication)">
            <summary>
            Contructor with the dependencies required
            </summary>
            <param name="unitOfWork"></param>
            <param name="userRepositoryGeneric"></param>
            <param name="tokenAuthentication"></param>
        </member>
        <member name="T:User.API.Controllers.UserController">
            <summary>
             controller to manage user 
            </summary>
        </member>
        <member name="M:User.API.Controllers.UserController.#ctor(User.API.Application.Contracts.IUserService,Microsoft.Extensions.Logging.ILogger{User.API.Controllers.UserController})">
            <summary>
             Constructor with the environment and repository dependencies
            </summary>
            <param name="userService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:User.API.Controllers.UserController.AddUser(User.API.Application.Model.Request.AddUserRequest)">
            <summary>
            Create a new user. 
            </summary>
            <remarks>Endpoint to create a new user</remarks>
            <param name="addUserRequest">information about the user</param>
        </member>
        <member name="M:User.API.Controllers.UserController.GetUser(System.String)">
            <summary>
            Get a user info. 
            </summary>
            <remarks>Endpoint to get an user</remarks>
            <param name="username">User id</param>
        </member>
        <member name="M:User.API.Controllers.UserController.GetUsers">
            <summary>
            Get list of user info. 
            </summary>
            <remarks>Endpoint to get all the users</remarks>
        </member>
        <member name="M:User.API.Controllers.UserController.Autenticate(User.API.Application.Model.Request.UserInfoRequest)">
            <summary>
            Get list of user info. 
            </summary>
            <remarks>Endpoint to get all the users</remarks>
        </member>
        <member name="T:User.API.Infraestructure.UserContextSeed">
            <summary>
            Static class which checks migrations
            </summary>
        </member>
        <member name="M:User.API.Infraestructure.UserContextSeed.AllMigrationsApplied(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            checks if a migration can be applied
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:User.API.Infraestructure.UserContextSeed.EnsureSeed(UserManagement.Domain.Infraestructure.UserManagementContext,Microsoft.Extensions.Options.IOptions{User.API.Application.Model.UserSettings},Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Get the seed to fill the databasse
            </summary>
            <param name="context"></param>
            <param name="settings"></param>
            <param name="environment"></param>
            <param name="logger"></param>
        </member>
    </members>
</doc>
